// --- template _header.gotpl ---
// Code generated by Prisma Client Go. DO NOT EDIT.
//nolint
//go:build !codeanalysis
// +build !codeanalysis

package db

import (
	"context"
	"os"
	"slices"
	"testing"

	// no-op import for go modules
	_ "github.com/joho/godotenv"
	_ "github.com/shopspring/decimal"

	"github.com/steebchen/prisma-client-go/engine"
	"github.com/steebchen/prisma-client-go/engine/mock"
	"github.com/steebchen/prisma-client-go/runtime/builder"
	"github.com/steebchen/prisma-client-go/runtime/lifecycle"
	"github.com/steebchen/prisma-client-go/runtime/raw"
	"github.com/steebchen/prisma-client-go/runtime/transaction"
	"github.com/steebchen/prisma-client-go/runtime/types"
	rawmodels "github.com/steebchen/prisma-client-go/runtime/types/raw"
)

// ignore unused os import as it may not be needed depending on engine type
var _ = os.DevNull

// re-declare variables which are needed in Prisma Client Go but also should be exported
// in the generated client

type PrismaTransaction = transaction.Transaction

const RFC3339Milli = types.RFC3339Milli

type BatchResult = types.BatchResult

type Boolean = bool
type String = string
type Int = int
type Float = float64

type DateTime = types.DateTime
type JSON = types.JSON
type Bytes = types.Bytes
type BigInt = types.BigInt
type Decimal = types.Decimal

type RawString = rawmodels.String
type RawInt = rawmodels.Int
type RawFloat = rawmodels.Float
type RawBoolean = rawmodels.Boolean
type RawDateTime = rawmodels.DateTime
type RawJSON = rawmodels.JSON
type RawBytes = rawmodels.Bytes
type RawBigInt = rawmodels.BigInt
type RawDecimal = rawmodels.Decimal

// deprecated: use SortOrder
type Direction = SortOrder

const (
	// deprecated: use SortOrderAsc
	ASC Direction = "asc"
	// deprecated: use SortOrderDesc
	DESC Direction = "desc"
)

// --- template client.gotpl ---
const datasources = `[{"name":"db","provider":"mongodb","activeProvider":"mongodb","url":{"fromEnvVar":"","value":"mongodb://paste:paste@localhost:27017/paste"},"config":null}]`

const schema = `datasource db {
  provider = "mongodb"
  // url      = env("MONGO_URI") 
  url      = "mongodb://paste:paste@localhost:27017/paste"
}

generator db {
  provider = "go run github.com/steebchen/prisma-client-go"
}

// The Pastes model is used to store the pastes that are created by the users.
model Paste {
  id        String  @id @map("_id")
  content   String
  lineCount Int

  @@map("paste")
}`
const schemaDatasourceURL = "mongodb://paste:paste@localhost:27017/paste"
const schemaEnvVarName = ""

// hasBinaryTargets is true when binaryTargets are provided on generation time
var hasBinaryTargets = true

// NewClient creates a new Prisma Client Go client.
// The client is not connected to the Prisma engine yet.
//
// Example:
//
//	client := db.NewClient()
//	if err := client.Prisma.Connect(); err != nil {
//	  handle(err)
//	}
//
//	defer func() {
//	  if err := client.Prisma.Disconnect(); err != nil {
//	    panic(fmt.Errorf("could not disconnect: %w", err))
//	  }
//	}()
func NewClient(options ...func(config *PrismaConfig)) *PrismaClient {
	var config PrismaConfig
	for _, option := range options {
		option(&config)
	}

	c := newClient()

	// use the schema connection url if set
	url := config.datasourceURL
	if url == "" {
		url = schemaDatasourceURL
		if url == "" {
			// if not, use the schema env var name
			url = os.Getenv(schemaEnvVarName)
			if url == "" {
				//panic("no connection string found")
				println("WARNING: env var which was defined in the Prisma schema is not set" + schemaEnvVarName)
			}
		}
	}

	c.Engine = engine.NewQueryEngine(schema, hasBinaryTargets, datasources, url)

	c.Prisma.Lifecycle = &lifecycle.Lifecycle{Engine: c.Engine}

	return c
}

type PrismaConfig struct {
	datasourceURL string
}

func WithDatasourceURL(url string) func(*PrismaConfig) {
	return func(config *PrismaConfig) {
		config.datasourceURL = url
	}
}

func newMockClient(expectations *[]mock.Expectation) *PrismaClient {
	c := newClient()
	c.Engine = mock.New(expectations)
	c.Prisma.Lifecycle = &lifecycle.Lifecycle{Engine: c.Engine}

	return c
}

func newClient() *PrismaClient {
	c := &PrismaClient{}
	c.Paste = pasteActions{client: c}

	c.Prisma = &PrismaActions{
		Raw: &raw.Raw{Engine: c},
		TX:  &transaction.TX{Engine: c},
	}
	return c
}

type PrismaActions struct {
	*lifecycle.Lifecycle
	*raw.Raw
	*transaction.TX
}

// PrismaClient is the instance of the Prisma Client Go client.
type PrismaClient struct {
	// engine is an abstractions of what happens under the hood
	// the query engine can spawn and manage the binary and send requests to it,
	// while a mock engine would collect mocks to verify them later
	engine.Engine

	// prisma provides prisma-related methods as opposed to model methods, such as Connect, Disconnect or raw queries
	Prisma *PrismaActions

	// Paste provides access to CRUD methods.
	Paste pasteActions
}

// --- template enums.gotpl ---

type PasteScalarFieldEnum string

const (
	PasteScalarFieldEnumID        PasteScalarFieldEnum = "id"
	PasteScalarFieldEnumContent   PasteScalarFieldEnum = "content"
	PasteScalarFieldEnumLineCount PasteScalarFieldEnum = "lineCount"
)

type SortOrder string

const (
	SortOrderAsc  SortOrder = "asc"
	SortOrderDesc SortOrder = "desc"
)

type QueryMode string

const (
	QueryModeDefault     QueryMode = "default"
	QueryModeInsensitive QueryMode = "insensitive"
)

// --- template errors.gotpl ---
var ErrNotFound = types.ErrNotFound
var IsErrNotFound = types.IsErrNotFound

type ErrUniqueConstraint = types.ErrUniqueConstraint[prismaFields]

// IsErrUniqueConstraint returns on a unique constraint error or violation with error info
// Use as follows:
//
//	user, err := db.User.CreateOne(...).Exec(cxt)
//	if err != nil {
//		if info, err := db.IsErrUniqueConstraint(err); err != nil {
//			// Fields exists for Postgres and SQLite
//			log.Printf("unique constraint on the fields: %s", info.Fields)
//
//			// you can also compare it with generated field names:
//			if info.Fields[0] == db.User.Name.Field() {
//				// do something
//			}
//
//			// For MySQL, use the constraint key
//			log.Printf("unique constraint on the key: %s", info.Key)
//		}
//	}
func IsErrUniqueConstraint(err error) (*types.ErrUniqueConstraint[prismaFields], bool) {
	return types.CheckUniqueConstraint[prismaFields](err)
}

// --- template fields.gotpl ---
type prismaFields string

type pastePrismaFields = prismaFields

const pasteFieldID pastePrismaFields = "id"

const pasteFieldContent pastePrismaFields = "content"

const pasteFieldLineCount pastePrismaFields = "lineCount"

// --- template mock.gotpl ---
func NewMock() (*PrismaClient, *Mock, func(t *testing.T)) {
	expectations := new([]mock.Expectation)
	pc := newMockClient(expectations)
	m := &Mock{
		Mock: &mock.Mock{
			Expectations: expectations,
		},
	}

	m.Paste = pasteMock{
		mock: m,
	}

	return pc, m, m.Ensure
}

type Mock struct {
	*mock.Mock

	Paste pasteMock
}

type pasteMock struct {
	mock *Mock
}

type PasteMockExpectParam interface {
	ExtractQuery() builder.Query
	pasteModel()
}

func (m *pasteMock) Expect(query PasteMockExpectParam) *pasteMockExec {
	return &pasteMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type pasteMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *pasteMockExec) Returns(v PasteModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *pasteMockExec) ReturnsMany(v []PasteModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *pasteMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

// --- template models.gotpl ---

// PasteModel represents the Paste model and is a wrapper for accessing fields and methods
type PasteModel struct {
	InnerPaste
	RelationsPaste
}

// InnerPaste holds the actual data
type InnerPaste struct {
	ID        string `json:"id"`
	Content   string `json:"content"`
	LineCount int    `json:"lineCount"`
}

// RawPasteModel is a struct for Paste when used in raw queries
type RawPasteModel struct {
	ID        RawString `json:"id"`
	Content   RawString `json:"content"`
	LineCount RawInt    `json:"lineCount"`
}

// RelationsPaste holds the relation data separately
type RelationsPaste struct {
}

// --- template query.gotpl ---

// Paste acts as a namespaces to access query methods for the Paste model
var Paste = pasteQuery{}

// pasteQuery exposes query functions for the paste model
type pasteQuery struct {

	// ID
	//
	// @required
	ID pasteQueryIDString

	// Content
	//
	// @required
	Content pasteQueryContentString

	// LineCount
	//
	// @required
	LineCount pasteQueryLineCountInt
}

func (pasteQuery) Not(params ...PasteWhereParam) pasteDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return pasteDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (pasteQuery) Or(params ...PasteWhereParam) pasteDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return pasteDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (pasteQuery) And(params ...PasteWhereParam) pasteDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return pasteDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type pasteQueryIDString struct{}

// Set the required value of ID
func (r pasteQueryIDString) Set(value string) pasteWithPrismaIDSetParam {

	return pasteWithPrismaIDSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r pasteQueryIDString) SetIfPresent(value *String) pasteWithPrismaIDSetParam {
	if value == nil {
		return pasteWithPrismaIDSetParam{}
	}

	return r.Set(*value)
}

func (r pasteQueryIDString) Equals(value string) pasteWithPrismaIDEqualsUniqueParam {

	return pasteWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryIDString) EqualsIfPresent(value *string) pasteWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return pasteWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r pasteQueryIDString) Order(direction SortOrder) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r pasteQueryIDString) Cursor(cursor string) pasteCursorParam {
	return pasteCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r pasteQueryIDString) In(value []string) pasteParamUnique {
	return pasteParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryIDString) InIfPresent(value []string) pasteParamUnique {
	if value == nil {
		return pasteParamUnique{}
	}
	return r.In(value)
}

func (r pasteQueryIDString) NotIn(value []string) pasteParamUnique {
	return pasteParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryIDString) NotInIfPresent(value []string) pasteParamUnique {
	if value == nil {
		return pasteParamUnique{}
	}
	return r.NotIn(value)
}

func (r pasteQueryIDString) Lt(value string) pasteParamUnique {
	return pasteParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryIDString) LtIfPresent(value *string) pasteParamUnique {
	if value == nil {
		return pasteParamUnique{}
	}
	return r.Lt(*value)
}

func (r pasteQueryIDString) Lte(value string) pasteParamUnique {
	return pasteParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryIDString) LteIfPresent(value *string) pasteParamUnique {
	if value == nil {
		return pasteParamUnique{}
	}
	return r.Lte(*value)
}

func (r pasteQueryIDString) Gt(value string) pasteParamUnique {
	return pasteParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryIDString) GtIfPresent(value *string) pasteParamUnique {
	if value == nil {
		return pasteParamUnique{}
	}
	return r.Gt(*value)
}

func (r pasteQueryIDString) Gte(value string) pasteParamUnique {
	return pasteParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryIDString) GteIfPresent(value *string) pasteParamUnique {
	if value == nil {
		return pasteParamUnique{}
	}
	return r.Gte(*value)
}

func (r pasteQueryIDString) Contains(value string) pasteParamUnique {
	return pasteParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryIDString) ContainsIfPresent(value *string) pasteParamUnique {
	if value == nil {
		return pasteParamUnique{}
	}
	return r.Contains(*value)
}

func (r pasteQueryIDString) StartsWith(value string) pasteParamUnique {
	return pasteParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryIDString) StartsWithIfPresent(value *string) pasteParamUnique {
	if value == nil {
		return pasteParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r pasteQueryIDString) EndsWith(value string) pasteParamUnique {
	return pasteParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryIDString) EndsWithIfPresent(value *string) pasteParamUnique {
	if value == nil {
		return pasteParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r pasteQueryIDString) Mode(value QueryMode) pasteParamUnique {
	return pasteParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryIDString) ModeIfPresent(value *QueryMode) pasteParamUnique {
	if value == nil {
		return pasteParamUnique{}
	}
	return r.Mode(*value)
}

func (r pasteQueryIDString) Not(value string) pasteParamUnique {
	return pasteParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryIDString) NotIfPresent(value *string) pasteParamUnique {
	if value == nil {
		return pasteParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r pasteQueryIDString) HasPrefix(value string) pasteParamUnique {
	return pasteParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r pasteQueryIDString) HasPrefixIfPresent(value *string) pasteParamUnique {
	if value == nil {
		return pasteParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r pasteQueryIDString) HasSuffix(value string) pasteParamUnique {
	return pasteParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r pasteQueryIDString) HasSuffixIfPresent(value *string) pasteParamUnique {
	if value == nil {
		return pasteParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r pasteQueryIDString) Field() pastePrismaFields {
	return pasteFieldID
}

// base struct
type pasteQueryContentString struct{}

// Set the required value of Content
func (r pasteQueryContentString) Set(value string) pasteWithPrismaContentSetParam {

	return pasteWithPrismaContentSetParam{
		data: builder.Field{
			Name:  "content",
			Value: value,
		},
	}

}

// Set the optional value of Content dynamically
func (r pasteQueryContentString) SetIfPresent(value *String) pasteWithPrismaContentSetParam {
	if value == nil {
		return pasteWithPrismaContentSetParam{}
	}

	return r.Set(*value)
}

func (r pasteQueryContentString) Equals(value string) pasteWithPrismaContentEqualsParam {

	return pasteWithPrismaContentEqualsParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryContentString) EqualsIfPresent(value *string) pasteWithPrismaContentEqualsParam {
	if value == nil {
		return pasteWithPrismaContentEqualsParam{}
	}
	return r.Equals(*value)
}

func (r pasteQueryContentString) Order(direction SortOrder) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name:  "content",
			Value: direction,
		},
	}
}

func (r pasteQueryContentString) Cursor(cursor string) pasteCursorParam {
	return pasteCursorParam{
		data: builder.Field{
			Name:  "content",
			Value: cursor,
		},
	}
}

func (r pasteQueryContentString) In(value []string) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryContentString) InIfPresent(value []string) pasteDefaultParam {
	if value == nil {
		return pasteDefaultParam{}
	}
	return r.In(value)
}

func (r pasteQueryContentString) NotIn(value []string) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryContentString) NotInIfPresent(value []string) pasteDefaultParam {
	if value == nil {
		return pasteDefaultParam{}
	}
	return r.NotIn(value)
}

func (r pasteQueryContentString) Lt(value string) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryContentString) LtIfPresent(value *string) pasteDefaultParam {
	if value == nil {
		return pasteDefaultParam{}
	}
	return r.Lt(*value)
}

func (r pasteQueryContentString) Lte(value string) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryContentString) LteIfPresent(value *string) pasteDefaultParam {
	if value == nil {
		return pasteDefaultParam{}
	}
	return r.Lte(*value)
}

func (r pasteQueryContentString) Gt(value string) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryContentString) GtIfPresent(value *string) pasteDefaultParam {
	if value == nil {
		return pasteDefaultParam{}
	}
	return r.Gt(*value)
}

func (r pasteQueryContentString) Gte(value string) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryContentString) GteIfPresent(value *string) pasteDefaultParam {
	if value == nil {
		return pasteDefaultParam{}
	}
	return r.Gte(*value)
}

func (r pasteQueryContentString) Contains(value string) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryContentString) ContainsIfPresent(value *string) pasteDefaultParam {
	if value == nil {
		return pasteDefaultParam{}
	}
	return r.Contains(*value)
}

func (r pasteQueryContentString) StartsWith(value string) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryContentString) StartsWithIfPresent(value *string) pasteDefaultParam {
	if value == nil {
		return pasteDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r pasteQueryContentString) EndsWith(value string) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryContentString) EndsWithIfPresent(value *string) pasteDefaultParam {
	if value == nil {
		return pasteDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r pasteQueryContentString) Mode(value QueryMode) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryContentString) ModeIfPresent(value *QueryMode) pasteDefaultParam {
	if value == nil {
		return pasteDefaultParam{}
	}
	return r.Mode(*value)
}

func (r pasteQueryContentString) Not(value string) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryContentString) NotIfPresent(value *string) pasteDefaultParam {
	if value == nil {
		return pasteDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r pasteQueryContentString) HasPrefix(value string) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r pasteQueryContentString) HasPrefixIfPresent(value *string) pasteDefaultParam {
	if value == nil {
		return pasteDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r pasteQueryContentString) HasSuffix(value string) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r pasteQueryContentString) HasSuffixIfPresent(value *string) pasteDefaultParam {
	if value == nil {
		return pasteDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r pasteQueryContentString) Field() pastePrismaFields {
	return pasteFieldContent
}

// base struct
type pasteQueryLineCountInt struct{}

// Set the required value of LineCount
func (r pasteQueryLineCountInt) Set(value int) pasteWithPrismaLineCountSetParam {

	return pasteWithPrismaLineCountSetParam{
		data: builder.Field{
			Name:  "lineCount",
			Value: value,
		},
	}

}

// Set the optional value of LineCount dynamically
func (r pasteQueryLineCountInt) SetIfPresent(value *Int) pasteWithPrismaLineCountSetParam {
	if value == nil {
		return pasteWithPrismaLineCountSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of LineCount
func (r pasteQueryLineCountInt) Increment(value int) pasteWithPrismaLineCountSetParam {
	return pasteWithPrismaLineCountSetParam{
		data: builder.Field{
			Name: "lineCount",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryLineCountInt) IncrementIfPresent(value *int) pasteWithPrismaLineCountSetParam {
	if value == nil {
		return pasteWithPrismaLineCountSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of LineCount
func (r pasteQueryLineCountInt) Decrement(value int) pasteWithPrismaLineCountSetParam {
	return pasteWithPrismaLineCountSetParam{
		data: builder.Field{
			Name: "lineCount",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryLineCountInt) DecrementIfPresent(value *int) pasteWithPrismaLineCountSetParam {
	if value == nil {
		return pasteWithPrismaLineCountSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of LineCount
func (r pasteQueryLineCountInt) Multiply(value int) pasteWithPrismaLineCountSetParam {
	return pasteWithPrismaLineCountSetParam{
		data: builder.Field{
			Name: "lineCount",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryLineCountInt) MultiplyIfPresent(value *int) pasteWithPrismaLineCountSetParam {
	if value == nil {
		return pasteWithPrismaLineCountSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of LineCount
func (r pasteQueryLineCountInt) Divide(value int) pasteWithPrismaLineCountSetParam {
	return pasteWithPrismaLineCountSetParam{
		data: builder.Field{
			Name: "lineCount",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryLineCountInt) DivideIfPresent(value *int) pasteWithPrismaLineCountSetParam {
	if value == nil {
		return pasteWithPrismaLineCountSetParam{}
	}
	return r.Divide(*value)
}

func (r pasteQueryLineCountInt) Equals(value int) pasteWithPrismaLineCountEqualsParam {

	return pasteWithPrismaLineCountEqualsParam{
		data: builder.Field{
			Name: "lineCount",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryLineCountInt) EqualsIfPresent(value *int) pasteWithPrismaLineCountEqualsParam {
	if value == nil {
		return pasteWithPrismaLineCountEqualsParam{}
	}
	return r.Equals(*value)
}

func (r pasteQueryLineCountInt) Order(direction SortOrder) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name:  "lineCount",
			Value: direction,
		},
	}
}

func (r pasteQueryLineCountInt) Cursor(cursor int) pasteCursorParam {
	return pasteCursorParam{
		data: builder.Field{
			Name:  "lineCount",
			Value: cursor,
		},
	}
}

func (r pasteQueryLineCountInt) In(value []int) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name: "lineCount",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryLineCountInt) InIfPresent(value []int) pasteDefaultParam {
	if value == nil {
		return pasteDefaultParam{}
	}
	return r.In(value)
}

func (r pasteQueryLineCountInt) NotIn(value []int) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name: "lineCount",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryLineCountInt) NotInIfPresent(value []int) pasteDefaultParam {
	if value == nil {
		return pasteDefaultParam{}
	}
	return r.NotIn(value)
}

func (r pasteQueryLineCountInt) Lt(value int) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name: "lineCount",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryLineCountInt) LtIfPresent(value *int) pasteDefaultParam {
	if value == nil {
		return pasteDefaultParam{}
	}
	return r.Lt(*value)
}

func (r pasteQueryLineCountInt) Lte(value int) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name: "lineCount",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryLineCountInt) LteIfPresent(value *int) pasteDefaultParam {
	if value == nil {
		return pasteDefaultParam{}
	}
	return r.Lte(*value)
}

func (r pasteQueryLineCountInt) Gt(value int) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name: "lineCount",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryLineCountInt) GtIfPresent(value *int) pasteDefaultParam {
	if value == nil {
		return pasteDefaultParam{}
	}
	return r.Gt(*value)
}

func (r pasteQueryLineCountInt) Gte(value int) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name: "lineCount",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryLineCountInt) GteIfPresent(value *int) pasteDefaultParam {
	if value == nil {
		return pasteDefaultParam{}
	}
	return r.Gte(*value)
}

func (r pasteQueryLineCountInt) Not(value int) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name: "lineCount",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r pasteQueryLineCountInt) NotIfPresent(value *int) pasteDefaultParam {
	if value == nil {
		return pasteDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r pasteQueryLineCountInt) LT(value int) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name: "lineCount",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r pasteQueryLineCountInt) LTIfPresent(value *int) pasteDefaultParam {
	if value == nil {
		return pasteDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r pasteQueryLineCountInt) LTE(value int) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name: "lineCount",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r pasteQueryLineCountInt) LTEIfPresent(value *int) pasteDefaultParam {
	if value == nil {
		return pasteDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r pasteQueryLineCountInt) GT(value int) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name: "lineCount",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r pasteQueryLineCountInt) GTIfPresent(value *int) pasteDefaultParam {
	if value == nil {
		return pasteDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r pasteQueryLineCountInt) GTE(value int) pasteDefaultParam {
	return pasteDefaultParam{
		data: builder.Field{
			Name: "lineCount",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r pasteQueryLineCountInt) GTEIfPresent(value *int) pasteDefaultParam {
	if value == nil {
		return pasteDefaultParam{}
	}
	return r.GTE(*value)
}

func (r pasteQueryLineCountInt) Field() pastePrismaFields {
	return pasteFieldLineCount
}

// --- template actions.gotpl ---
var countOutput = []builder.Output{
	{Name: "count"},
}

type pasteActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var pasteOutput = []builder.Output{
	{Name: "id"},
	{Name: "content"},
	{Name: "lineCount"},
}

type PasteRelationWith interface {
	getQuery() builder.Query
	with()
	pasteRelation()
}

type PasteWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	pasteModel()
}

type pasteDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p pasteDefaultParam) field() builder.Field {
	return p.data
}

func (p pasteDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p pasteDefaultParam) pasteModel() {}

type PasteOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	pasteModel()
}

type pasteOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p pasteOrderByParam) field() builder.Field {
	return p.data
}

func (p pasteOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p pasteOrderByParam) pasteModel() {}

type PasteCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	pasteModel()
	isCursor()
}

type pasteCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p pasteCursorParam) field() builder.Field {
	return p.data
}

func (p pasteCursorParam) isCursor() {}

func (p pasteCursorParam) getQuery() builder.Query {
	return p.query
}

func (p pasteCursorParam) pasteModel() {}

type PasteParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	pasteModel()
}

type pasteParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p pasteParamUnique) pasteModel() {}

func (pasteParamUnique) unique() {}

func (p pasteParamUnique) field() builder.Field {
	return p.data
}

func (p pasteParamUnique) getQuery() builder.Query {
	return p.query
}

type PasteEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	pasteModel()
}

type pasteEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p pasteEqualsParam) pasteModel() {}

func (pasteEqualsParam) equals() {}

func (p pasteEqualsParam) field() builder.Field {
	return p.data
}

func (p pasteEqualsParam) getQuery() builder.Query {
	return p.query
}

type PasteEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	pasteModel()
}

type pasteEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p pasteEqualsUniqueParam) pasteModel() {}

func (pasteEqualsUniqueParam) unique() {}
func (pasteEqualsUniqueParam) equals() {}

func (p pasteEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p pasteEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type PasteSetParam interface {
	field() builder.Field
	settable()
	pasteModel()
}

type pasteSetParam struct {
	data builder.Field
}

func (pasteSetParam) settable() {}

func (p pasteSetParam) field() builder.Field {
	return p.data
}

func (p pasteSetParam) pasteModel() {}

type PasteWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	pasteModel()
	idField()
}

type PasteWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	pasteModel()
	idField()
}

type pasteWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p pasteWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p pasteWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p pasteWithPrismaIDSetParam) pasteModel() {}

func (p pasteWithPrismaIDSetParam) idField() {}

type PasteWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	pasteModel()
	idField()
}

type pasteWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p pasteWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p pasteWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p pasteWithPrismaIDEqualsParam) pasteModel() {}

func (p pasteWithPrismaIDEqualsParam) idField() {}

func (pasteWithPrismaIDSetParam) settable()  {}
func (pasteWithPrismaIDEqualsParam) equals() {}

type pasteWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p pasteWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p pasteWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p pasteWithPrismaIDEqualsUniqueParam) pasteModel() {}
func (p pasteWithPrismaIDEqualsUniqueParam) idField()    {}

func (pasteWithPrismaIDEqualsUniqueParam) unique() {}
func (pasteWithPrismaIDEqualsUniqueParam) equals() {}

type PasteWithPrismaContentEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	pasteModel()
	contentField()
}

type PasteWithPrismaContentSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	pasteModel()
	contentField()
}

type pasteWithPrismaContentSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p pasteWithPrismaContentSetParam) field() builder.Field {
	return p.data
}

func (p pasteWithPrismaContentSetParam) getQuery() builder.Query {
	return p.query
}

func (p pasteWithPrismaContentSetParam) pasteModel() {}

func (p pasteWithPrismaContentSetParam) contentField() {}

type PasteWithPrismaContentWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	pasteModel()
	contentField()
}

type pasteWithPrismaContentEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p pasteWithPrismaContentEqualsParam) field() builder.Field {
	return p.data
}

func (p pasteWithPrismaContentEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p pasteWithPrismaContentEqualsParam) pasteModel() {}

func (p pasteWithPrismaContentEqualsParam) contentField() {}

func (pasteWithPrismaContentSetParam) settable()  {}
func (pasteWithPrismaContentEqualsParam) equals() {}

type pasteWithPrismaContentEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p pasteWithPrismaContentEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p pasteWithPrismaContentEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p pasteWithPrismaContentEqualsUniqueParam) pasteModel()   {}
func (p pasteWithPrismaContentEqualsUniqueParam) contentField() {}

func (pasteWithPrismaContentEqualsUniqueParam) unique() {}
func (pasteWithPrismaContentEqualsUniqueParam) equals() {}

type PasteWithPrismaLineCountEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	pasteModel()
	lineCountField()
}

type PasteWithPrismaLineCountSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	pasteModel()
	lineCountField()
}

type pasteWithPrismaLineCountSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p pasteWithPrismaLineCountSetParam) field() builder.Field {
	return p.data
}

func (p pasteWithPrismaLineCountSetParam) getQuery() builder.Query {
	return p.query
}

func (p pasteWithPrismaLineCountSetParam) pasteModel() {}

func (p pasteWithPrismaLineCountSetParam) lineCountField() {}

type PasteWithPrismaLineCountWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	pasteModel()
	lineCountField()
}

type pasteWithPrismaLineCountEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p pasteWithPrismaLineCountEqualsParam) field() builder.Field {
	return p.data
}

func (p pasteWithPrismaLineCountEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p pasteWithPrismaLineCountEqualsParam) pasteModel() {}

func (p pasteWithPrismaLineCountEqualsParam) lineCountField() {}

func (pasteWithPrismaLineCountSetParam) settable()  {}
func (pasteWithPrismaLineCountEqualsParam) equals() {}

type pasteWithPrismaLineCountEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p pasteWithPrismaLineCountEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p pasteWithPrismaLineCountEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p pasteWithPrismaLineCountEqualsUniqueParam) pasteModel()     {}
func (p pasteWithPrismaLineCountEqualsUniqueParam) lineCountField() {}

func (pasteWithPrismaLineCountEqualsUniqueParam) unique() {}
func (pasteWithPrismaLineCountEqualsUniqueParam) equals() {}

// --- template create.gotpl ---

// Creates a single paste.
func (r pasteActions) CreateOne(
	_id PasteWithPrismaIDSetParam,
	_content PasteWithPrismaContentSetParam,
	_lineCount PasteWithPrismaLineCountSetParam,

	optional ...PasteSetParam,
) pasteCreateOne {
	var v pasteCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Paste"
	v.query.Outputs = pasteOutput

	var fields []builder.Field

	fields = append(fields, _id.field())
	fields = append(fields, _content.field())
	fields = append(fields, _lineCount.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r pasteCreateOne) With(params ...PasteRelationWith) pasteCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type pasteCreateOne struct {
	query builder.Query
}

func (p pasteCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p pasteCreateOne) pasteModel() {}

func (r pasteCreateOne) Exec(ctx context.Context) (*PasteModel, error) {
	var v PasteModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r pasteCreateOne) Tx() PasteUniqueTxResult {
	v := newPasteUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template find.gotpl ---

type pasteFindUnique struct {
	query builder.Query
}

func (r pasteFindUnique) getQuery() builder.Query {
	return r.query
}

func (r pasteFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r pasteFindUnique) with()          {}
func (r pasteFindUnique) pasteModel()    {}
func (r pasteFindUnique) pasteRelation() {}

func (r pasteActions) FindUnique(
	params PasteEqualsUniqueWhereParam,
) pasteFindUnique {
	var v pasteFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Paste"
	v.query.Outputs = pasteOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r pasteFindUnique) With(params ...PasteRelationWith) pasteFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r pasteFindUnique) Select(params ...pastePrismaFields) pasteFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r pasteFindUnique) Omit(params ...pastePrismaFields) pasteFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range pasteOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r pasteFindUnique) Exec(ctx context.Context) (
	*PasteModel,
	error,
) {
	var v *PasteModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r pasteFindUnique) ExecInner(ctx context.Context) (
	*InnerPaste,
	error,
) {
	var v *InnerPaste
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r pasteFindUnique) Update(params ...PasteSetParam) pasteUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Paste"

	var v pasteUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type pasteUpdateUnique struct {
	query builder.Query
}

func (r pasteUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r pasteUpdateUnique) pasteModel() {}

func (r pasteUpdateUnique) Exec(ctx context.Context) (*PasteModel, error) {
	var v PasteModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r pasteUpdateUnique) Tx() PasteUniqueTxResult {
	v := newPasteUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r pasteFindUnique) Delete() pasteDeleteUnique {
	var v pasteDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Paste"

	return v
}

type pasteDeleteUnique struct {
	query builder.Query
}

func (r pasteDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p pasteDeleteUnique) pasteModel() {}

func (r pasteDeleteUnique) Exec(ctx context.Context) (*PasteModel, error) {
	var v PasteModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r pasteDeleteUnique) Tx() PasteUniqueTxResult {
	v := newPasteUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type pasteFindFirst struct {
	query builder.Query
}

func (r pasteFindFirst) getQuery() builder.Query {
	return r.query
}

func (r pasteFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r pasteFindFirst) with()          {}
func (r pasteFindFirst) pasteModel()    {}
func (r pasteFindFirst) pasteRelation() {}

func (r pasteActions) FindFirst(
	params ...PasteWhereParam,
) pasteFindFirst {
	var v pasteFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Paste"
	v.query.Outputs = pasteOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r pasteFindFirst) With(params ...PasteRelationWith) pasteFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r pasteFindFirst) Select(params ...pastePrismaFields) pasteFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r pasteFindFirst) Omit(params ...pastePrismaFields) pasteFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range pasteOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r pasteFindFirst) OrderBy(params ...PasteOrderByParam) pasteFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r pasteFindFirst) Skip(count int) pasteFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r pasteFindFirst) Take(count int) pasteFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r pasteFindFirst) Cursor(cursor PasteCursorParam) pasteFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r pasteFindFirst) Exec(ctx context.Context) (
	*PasteModel,
	error,
) {
	var v *PasteModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r pasteFindFirst) ExecInner(ctx context.Context) (
	*InnerPaste,
	error,
) {
	var v *InnerPaste
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type pasteFindMany struct {
	query builder.Query
}

func (r pasteFindMany) getQuery() builder.Query {
	return r.query
}

func (r pasteFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r pasteFindMany) with()          {}
func (r pasteFindMany) pasteModel()    {}
func (r pasteFindMany) pasteRelation() {}

func (r pasteActions) FindMany(
	params ...PasteWhereParam,
) pasteFindMany {
	var v pasteFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Paste"
	v.query.Outputs = pasteOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r pasteFindMany) With(params ...PasteRelationWith) pasteFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r pasteFindMany) Select(params ...pastePrismaFields) pasteFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r pasteFindMany) Omit(params ...pastePrismaFields) pasteFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range pasteOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r pasteFindMany) OrderBy(params ...PasteOrderByParam) pasteFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r pasteFindMany) Skip(count int) pasteFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r pasteFindMany) Take(count int) pasteFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r pasteFindMany) Cursor(cursor PasteCursorParam) pasteFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r pasteFindMany) Exec(ctx context.Context) (
	[]PasteModel,
	error,
) {
	var v []PasteModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r pasteFindMany) ExecInner(ctx context.Context) (
	[]InnerPaste,
	error,
) {
	var v []InnerPaste
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r pasteFindMany) Update(params ...PasteSetParam) pasteUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Paste"

	r.query.Outputs = countOutput

	var v pasteUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type pasteUpdateMany struct {
	query builder.Query
}

func (r pasteUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r pasteUpdateMany) pasteModel() {}

func (r pasteUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r pasteUpdateMany) Tx() PasteManyTxResult {
	v := newPasteManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r pasteFindMany) Delete() pasteDeleteMany {
	var v pasteDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Paste"

	v.query.Outputs = countOutput

	return v
}

type pasteDeleteMany struct {
	query builder.Query
}

func (r pasteDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p pasteDeleteMany) pasteModel() {}

func (r pasteDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r pasteDeleteMany) Tx() PasteManyTxResult {
	v := newPasteManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template transaction.gotpl ---

func newPasteUniqueTxResult() PasteUniqueTxResult {
	return PasteUniqueTxResult{
		result: &transaction.Result{},
	}
}

type PasteUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p PasteUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p PasteUniqueTxResult) IsTx() {}

func (r PasteUniqueTxResult) Result() (v *PasteModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newPasteManyTxResult() PasteManyTxResult {
	return PasteManyTxResult{
		result: &transaction.Result{},
	}
}

type PasteManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p PasteManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p PasteManyTxResult) IsTx() {}

func (r PasteManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

// --- template upsert.gotpl ---

type pasteUpsertOne struct {
	query builder.Query
}

func (r pasteUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r pasteUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r pasteUpsertOne) with()          {}
func (r pasteUpsertOne) pasteModel()    {}
func (r pasteUpsertOne) pasteRelation() {}

func (r pasteActions) UpsertOne(
	params PasteEqualsUniqueWhereParam,
) pasteUpsertOne {
	var v pasteUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Paste"
	v.query.Outputs = pasteOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r pasteUpsertOne) Create(

	_id PasteWithPrismaIDSetParam,
	_content PasteWithPrismaContentSetParam,
	_lineCount PasteWithPrismaLineCountSetParam,

	optional ...PasteSetParam,
) pasteUpsertOne {
	var v pasteUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _id.field())
	fields = append(fields, _content.field())
	fields = append(fields, _lineCount.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r pasteUpsertOne) Update(
	params ...PasteSetParam,
) pasteUpsertOne {
	var v pasteUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r pasteUpsertOne) Exec(ctx context.Context) (*PasteModel, error) {
	var v PasteModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r pasteUpsertOne) Tx() PasteUniqueTxResult {
	v := newPasteUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}
